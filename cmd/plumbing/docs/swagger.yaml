basePath: /
definitions:
  models.BrandResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      photo:
        type: string
    type: object
  models.CategoriesRequest:
    properties:
      language_code:
        type: string
      name:
        type: string
    type: object
  models.CategoriesResponse:
    properties:
      id:
        type: integer
      language_code:
        type: string
      name:
        type: string
    type: object
  models.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.CollectionResponse:
    properties:
      colors:
        items:
          $ref: '#/definitions/models.ColorResponse'
        type: array
      description:
        type: string
      id:
        type: integer
      is_new:
        type: boolean
      is_popular:
        type: boolean
      isPainted:
        type: boolean
      isProducer:
        type: boolean
      name:
        type: string
      photos:
        items:
          $ref: '#/definitions/models.PhotosResponse'
        type: array
      price:
        type: number
    type: object
  models.ColorResponse:
    properties:
      hash_color:
        type: string
      id:
        type: integer
    type: object
  models.CreateCategoryRequest:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.CategoriesRequest'
        type: array
    type: object
  models.CreateCategoryResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.CategoriesResponse'
        type: array
    type: object
  models.CreateReviewRequest:
    properties:
      rating:
        type: integer
      text:
        type: string
      username:
        type: string
    type: object
  models.ErrorMessage:
    properties:
      message:
        type: string
    type: object
  models.GetCategoryRequest:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.CategoriesRequest'
        type: array
      id:
        type: integer
    type: object
  models.ItemResponse:
    properties:
      category_id:
        type: integer
      collection_id:
        type: integer
      colors:
        items:
          $ref: '#/definitions/models.ColorResponse'
        type: array
      description:
        type: string
      id:
        type: integer
      is_new:
        type: boolean
      is_popular:
        type: boolean
      isPainted:
        type: boolean
      isProducer:
        type: boolean
      name:
        type: string
      photos:
        items:
          $ref: '#/definitions/models.PhotosResponse'
        type: array
      price:
        type: number
      size:
        type: string
    type: object
  models.Language:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  models.Message:
    properties:
      message:
        type: string
    type: object
  models.PhotosResponse:
    properties:
      id:
        type: integer
      isMain:
        type: boolean
      url:
        type: string
    type: object
  models.PopularResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/models.CollectionResponse'
        type: array
      items:
        items:
          $ref: '#/definitions/models.ItemResponse'
        type: array
    type: object
  models.RemoveBrandRequest:
    properties:
      id:
        type: integer
    type: object
  models.RemoveCategoryRequest:
    properties:
      id:
        type: integer
    type: object
  models.RemoveCollectionRequest:
    properties:
      id:
        type: integer
    type: object
  models.ReviewResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      rating:
        type: integer
      text:
        type: string
      username:
        type: string
    type: object
  models.Token:
    properties:
      token:
        type: string
    type: object
  models.UpdateCategoryRequest:
    properties:
      category_id:
        type: integer
      language_code:
        type: string
      name:
        type: string
    type: object
  models.UserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: support@swagger.io
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Plumbing API
  version: "1.0"
paths:
  /brand:
    delete:
      consumes:
      - application/json
      description: Removes a brand by ID with authorization token required
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Brand ID to delete
        in: body
        name: RemoveBrandRequest
        required: true
        schema:
          $ref: '#/definitions/models.RemoveBrandRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully removed brand
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Invalid request body or brand not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "401":
          description: Token required or invalid token format
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "403":
          description: Permissions denied
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Deletes a brand
      tags:
      - brand
    get:
      consumes:
      - application/json
      description: Retrieves the details of a brand using its ID from the query parameter
      parameters:
      - description: Brand ID to retrieve
        in: query
        name: brand_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved brand
          schema:
            $ref: '#/definitions/models.BrandResponse'
        "400":
          description: Invalid or missing brand ID
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Brand not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Get a brand by ID
      tags:
      - brand
    post:
      consumes:
      - multipart/form-data
      description: Creates a new brand by accepting form data, including an image
        file
      parameters:
      - description: Brand name
        in: formData
        name: name
        required: true
        type: string
      - description: Brand image
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "400":
          description: Validation error or bad request
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Creates a new brand
      tags:
      - brand
    put:
      consumes:
      - multipart/form-data
      description: Updates the details of an existing brand by ID, including the option
        to upload a new image
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Brand ID to update
        in: query
        name: id
        required: true
        type: integer
      - description: Updated brand name
        in: formData
        name: name
        required: true
        type: string
      - description: Updated brand image
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated brand
          schema:
            $ref: '#/definitions/models.BrandResponse'
        "400":
          description: Invalid brand ID or form data
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "401":
          description: Token required or invalid token format
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "403":
          description: Permissions denied
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Brand not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Updates a brand's information
      tags:
      - brand
  /brands:
    get:
      description: Retrieves a list of all available brands
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all brands
          schema:
            items:
              $ref: '#/definitions/models.BrandResponse'
            type: array
        "500":
          description: Failed to get brands
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Get all brands
      tags:
      - brand
  /category:
    delete:
      consumes:
      - application/json
      description: Deletes a category. Requires a valid token.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category removal details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.RemoveCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully removed category
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Invalid request body or category not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "401":
          description: Token required or invalid format
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "403":
          description: Permissions denied
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Failed to remove category
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Remove a category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Returns a list of categories for a specified language code
      parameters:
      - description: Language code
        in: query
        name: lang
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "400":
          description: Missing language code
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Language code not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Retrieve categories by language code
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Creates a new category. Requires a valid token and at least 3 language
        entries.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category creation details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created category
          schema:
            $ref: '#/definitions/models.CreateCategoryResponse'
        "400":
          description: Invalid request body or category exists or less than required
            languages
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "401":
          description: Token required or invalid format
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "403":
          description: Permissions denied
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Failed to create category
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Create a new category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Updates a category with new details. Requires a valid token.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Category update details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated category
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Invalid request body or category not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "401":
          description: Token required or invalid format
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "403":
          description: Permissions denied
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Failed to update category
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Update a category
      tags:
      - categories
  /category/by/id:
    get:
      consumes:
      - application/json
      description: Retrieves the details of a category using its ID from the query
        parameter
      parameters:
      - description: Category ID to retrieve
        in: query
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved category
          schema:
            $ref: '#/definitions/models.GetCategoryRequest'
        "400":
          description: Invalid or missing category ID
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Get a category by ID
      tags:
      - categories
  /collection:
    delete:
      consumes:
      - application/json
      description: Removes a collection from the database by ID. Requires a valid
        token.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Collection removal details
        in: body
        name: collection
        required: true
        schema:
          $ref: '#/definitions/models.RemoveCollectionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully removed collection
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Invalid request body or collection not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "401":
          description: Token required or invalid format
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "403":
          description: Permissions denied
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Failed to remove collection
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Remove a collection
      tags:
      - collections
    get:
      consumes:
      - application/json
      description: Returns details of a specific collection in the specified language
      parameters:
      - description: Collection ID
        in: query
        name: collection_id
        required: true
        type: integer
      - description: Language code
        in: query
        name: lang
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Collection details
          schema:
            $ref: '#/definitions/models.CollectionResponse'
        "400":
          description: Missing or invalid parameters
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Collection not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Retrieve a collection by ID and language code
      tags:
      - collections
  /collections:
    get:
      consumes:
      - application/json
      description: Returns a list of collections in the specified language for a category
      parameters:
      - description: Language code
        in: query
        name: lang
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of collections
          schema:
            items:
              $ref: '#/definitions/models.CollectionResponse'
            type: array
        "400":
          description: Missing language code
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Failed to get collections
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Retrieve collections painted
      tags:
      - collections
  /collections/rec:
    get:
      consumes:
      - application/json
      description: Returns a list of collections recommendation
      parameters:
      - description: Language code
        in: query
        name: lang
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of collections
          schema:
            items:
              $ref: '#/definitions/models.CollectionResponse'
            type: array
        "400":
          description: Missing language code
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Failed to get collections
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Retrieve collections recommendation by language code
      tags:
      - collections
  /item:
    get:
      consumes:
      - application/json
      description: Returns details of a specific item in the specified language
      parameters:
      - description: Item ID
        in: query
        name: item_id
        required: true
        type: integer
      - description: Language code
        in: query
        name: lang
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item details
          schema:
            $ref: '#/definitions/models.ItemResponse'
        "400":
          description: Missing or invalid parameters
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Item not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Retrieve an item by ID and language code
      tags:
      - items
  /items:
    get:
      consumes:
      - application/json
      description: Returns a list of items in the specified language for a category
      parameters:
      - description: Category ID
        in: query
        name: category_id
        required: true
        type: integer
      - description: Language code
        in: query
        name: lang
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of items
          schema:
            items:
              $ref: '#/definitions/models.ItemResponse'
            type: array
        "400":
          description: Missing or invalid parameters
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Retrieve items by category ID and language code
      tags:
      - items
  /items/collection:
    get:
      consumes:
      - application/json
      description: Returns a list of items in the specified language for a collection
      parameters:
      - description: Collection ID
        in: query
        name: collection_id
        required: true
        type: integer
      - description: Language code
        in: query
        name: lang
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of items
          schema:
            items:
              $ref: '#/definitions/models.ItemResponse'
            type: array
        "400":
          description: Missing or invalid parameters
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Collection not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Retrieve items by collection ID and language code
      tags:
      - items
  /items/rec:
    get:
      consumes:
      - application/json
      description: Returns a list of items in the specified language for recommendation
      parameters:
      - description: Item id
        in: query
        name: item_id
        required: true
        type: integer
      - description: Language code
        in: query
        name: lang
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of items
          schema:
            items:
              $ref: '#/definitions/models.ItemResponse'
            type: array
        "400":
          description: Missing or invalid parameters
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "404":
          description: Collection not found
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Retrieve items recommendation language code
      tags:
      - items
  /languages:
    get:
      consumes:
      - application/json
      description: Returns a list of all available languages
      produces:
      - application/json
      responses:
        "200":
          description: List of languages
          schema:
            items:
              $ref: '#/definitions/models.Language'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Retrieve all languages
      tags:
      - languages
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and provides a JWT token if credentials are
        valid
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login with JWT token
          schema:
            $ref: '#/definitions/models.Token'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "401":
          description: Could not login
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: User login
      tags:
      - auth
  /new:
    get:
      consumes:
      - application/json
      description: Returns a list of new collections and items for the specified language
      parameters:
      - description: Language code
        in: query
        name: lang
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of new collections and items
          schema:
            $ref: '#/definitions/models.PopularResponse'
        "400":
          description: Missing or invalid language parameter
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Retrieve new collections and items by language
      tags:
      - new
  /popular:
    get:
      consumes:
      - application/json
      description: Returns a list of popular collections and items for the specified
        language
      parameters:
      - description: Language code
        in: query
        name: lang
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of popular collections and items
          schema:
            $ref: '#/definitions/models.PopularResponse'
        "400":
          description: Missing or invalid language parameter
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Retrieve popular collections and items by language
      tags:
      - popular
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with a username and password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully registered
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Could not register
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Register a new user
      tags:
      - auth
  /reviews:
    get:
      description: Fetches all reviews from the database
      produces:
      - application/json
      responses:
        "200":
          description: List of reviews
          schema:
            items:
              $ref: '#/definitions/models.ReviewResponse'
            type: array
        "500":
          description: Failed to get reviews
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Get all reviews
      tags:
      - reviews
    post:
      consumes:
      - application/json
      description: Creates a review with the provided username, rating, and text
      parameters:
      - description: Review data
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/models.CreateReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created review
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Failed to create review
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Create a new review
      tags:
      - reviews
  /search:
    get:
      consumes:
      - application/json
      description: Performs a search for collections and items based on the provided
        parameters such as language, producer status, and search query.
      parameters:
      - description: Language code
        in: query
        name: lang
        type: string
      - description: Filter by producer status
        in: query
        name: is_producer
        type: boolean
      - description: Search query
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            $ref: '#/definitions/models.PopularResponse'
        "400":
          description: Bad request - invalid query parameters
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Search for collections and items based on language, producer status,
        and search query
      tags:
      - search
  /starter:
    post:
      consumes:
      - application/json
      description: Starts the service, potentially creating necessary data or performing
        required tasks.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "400":
          description: already exists
          schema:
            $ref: '#/definitions/models.ErrorMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorMessage'
      summary: Initialize the service or perform a start-up operation
      tags:
      - starter
swagger: "2.0"
